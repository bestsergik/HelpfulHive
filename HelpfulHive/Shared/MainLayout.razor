@using HelpfulHive.ViewModels
@using HelpfulHive.Models
@using HelpfulHive.Pages
@using HelpfulHive.Services
@using Microsoft.AspNetCore.Identity;
@inject TabViewModel TabVM
@inject RecordService rSRV
@inject RecordViewModel rVM
@inherits LayoutComponentBase
@inject NavigationManager NavManager


<PageTitle>HelpfulHive</PageTitle>

<div class="page">
    <div class="main-content">
        <div class="sidebar">
            <NavMenu />
        </div>
        <main class="main-container">
            <div class="top-container">
                <div class="top-row px-4">
                    <button @onclick="OpenAddRecordDialog">Add Record</button>
                    <button @onclick="NavigateToXmlDisplay" class="btn">Go to XML</button>
                    <button>3</button>
                    <button>4</button>
                    <button @onclick="Logout" class="btn">
                        <i class="fas fa-sign-out-alt"></i> Профиль
                    </button>

                </div>
        
            </div>
            <article class="content px-4">
                @Body
            </article>
            <!-- Место для Monaco Editor -->
            <div id="xmlEditor" style="height:400px;"></div>
        </main>
    </div>
</div>





@if (isAddRecordDialogOpen)
{
    <AddRecordDialog IsVisible="true" AvailableSubTabs="@GetAllSubTabs()"  OnRecordAdded="HandleRecordAdded" OnCloseDialog="CloseAddRecordDialog" SelectedTab="selectedTab"></AddRecordDialog>
}

@code{

    private bool isAddRecordDialogOpen = false;
    private TabItem? selectedTab = null;
    private IEnumerable<RecordModel>? tabRecords = null;
    private List<RecordModel>? topRecords;

    protected override async Task OnInitializedAsync()
    {
        topRecords = await rVM.GetTopNClickedRecordsAsync(8);
    }


    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private IHttpContextAccessor HttpContextAccessor { get; set; }
    [Inject]
    private SignInManager<IdentityUser> SignInManager { get; set; }
 

    private void Logout()
    {
        NavigationManager.NavigateTo("/Identity/Account/Manage/Index", forceLoad: true);
    }



    private IEnumerable<TabItem> GetAllSubTabs()
    {
        return TabVM.Tabs.SelectMany(tab => tab.SubTabs ?? new List<TabItem>());
    }

    private void CloseAddRecordDialog()
    {
        Console.WriteLine("CloseddRecordDialog");
        isAddRecordDialogOpen = false;
        InvokeAsync(StateHasChanged);

    }

    private void OpenAddRecordDialog()
    {
        Console.WriteLine("OpenAddRecordDialog");
        isAddRecordDialogOpen = true;
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleRecordAdded(RecordModel newRecord)
    {
        CloseAddRecordDialog();

        if (tabRecords != null && selectedTab?.Id == newRecord.Id)
        {
            tabRecords = tabRecords.Append(newRecord);
        }
    }

    private void NavigateToXmlDisplay()
    {
        NavManager.NavigateTo("/xml-display");
    }


}