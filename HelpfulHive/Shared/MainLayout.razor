@using HelpfulHive.ViewModels
@using HelpfulHive.Models
@using HelpfulHive.Pages
@using HelpfulHive.Services
@using Microsoft.AspNetCore.Identity;
@inject TabViewModel TabVM
@inject RecordService rSRV
@inject RecordViewModel rVM
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService uSRV
@inject IJSRuntime JSRuntime
@inject RecordUpdateService recordUpdateService

<svg id="checkmark" xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 50 50" style="position: fixed; visibility: hidden;">
    <defs>
        <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:rgb(100,200,230);stop-opacity:1" />
            <stop offset="100%" style="stop-color:rgb(180,250,250);stop-opacity:1" />
        </linearGradient>
    </defs>
    <path d="M5 25L20 40L45 5" stroke="url(#grad1)" stroke-width="8" fill="none" stroke-linecap="round" />
</svg>


<PageTitle>Supportools</PageTitle>



<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>
    <div class="right-section">
        <div class="top-row px-4">
            <button class="image-xml" @onclick="NavigateToXmlDisplay">
                <span class="tooltip-text2">Xml редактор</span>
            </button>
            <button class="image-add-template" @onclick="OpenAddRecordDialog">
                <span class="tooltip-text">Добавить шаблон</span>
            </button>
            <button class="image-favorite" @onclick="NavigateToFavorite" aria-label="Избранное">
                <span class="tooltip-text">Избранное</span>
            </button>

       

            <button class="image-comma" @onclick="@(e => GetCommaClick(e, "comma"))">
                <span class="tooltip-text">Добавить запятые</span>
            </button>

            <button class="image-pdf" @onclick="NavigateToPdfDisplay">
                <span class="tooltip-text">Руководство пользователя</span>
            </button>

            <button class="image-quotes" @onclick="@(e => GetCommaClick(e, "{NUMERIC_VARCHAR}"))">
                <span class="tooltip-text">Добавить кавычки</span>
            </button>
@*
            <button class="image-pdf" @onclick="StartProcess">
                <span class="tooltip-text">Обработка</span>
            </button>

*@



            <button @onclick="Logout" class="user-btn">
                @if (!string.IsNullOrEmpty(userName))
                {
                    if (!string.IsNullOrEmpty(profileImagePath) && profileImagePath != "/default-profile.png")
                    {
                        <img src="@profileImagePath" alt="Profile Image" class="user-img" />
                    }
                    <span class="user-name" style="color: #E0FFFF; font-size: 19px !important; font-family: 'NavMenuChildtLinkFont';">@userName</span>
                }
                else
                {
                    <span class="user-name">Профиль</span>
                }
            </button>
        </div>

  

    <div class="main-content">
     
        <main class="main-container">
          
            <article class="content px-4">
                @Body
            </article>
            <!-- Место для Monaco Editor -->
            <div id="xmlEditor" ></div>
        </main>
    </div>
</div>
</div>


@if (isAddRecordDialogOpen)
{
    <AddRecordDialog IsVisible="true" AvailableSubTabs="@GetAllSubTabs()"  OnRecordAdded="HandleRecordAdded" OnCloseDialog="CloseAddRecordDialog" SelectedTab="selectedTab"></AddRecordDialog>
}

<LoadingAnimation IsLoadingAnimation="@isLoadingAnimation" />

@code{

    private bool isAddRecordDialogOpen = false;
    private TabItem? selectedTab = null;
    private IEnumerable<RecordModel>? tabRecords = null;
    private List<RecordModel>? topRecords;
    private bool isLoadingAnimation = false;
    private string userName;
    private string profileImagePath;

    private bool isIndexed = false;

    private void NavigateToPdfDisplay()
    {
        NavigationManager.NavigateTo("/pdf-display");
    }


    private void NavigateToCompletedRecordList()
    {
        NavigationManager.NavigateTo("/completed-record-list");
    }

    public event Func<Task> RecordsUpdated;


    //private async Task StartProcess()
    //{
    //    // Здесь вызываем сервис для обработки данных
    //    await lsSRV.StartIndexingRawData();
    //    await lsSRV.StartIndexingRecords();
    //    Console.WriteLine("-------------------=-==-=-=-=-=--=-=-=-=-==-=-=-=-=-==-=-=-=-=-=-=-");
    //}



    private async void OnRecordsUpdated()
    {
        if (RecordsUpdated != null)
        {
            await RecordsUpdated.Invoke();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //if (!isIndexed)
        //{
        //    await StartProcess();
        //    isIndexed = true;
        //}
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;

            // Здесь предполагается, что у вас есть DI для UserService
            profileImagePath = await uSRV.GetUserProfileImagePath(userName);
        }

        topRecords = await rVM.GetTopNClickedRecordsAsync(8);

    }


    private async Task GetCommaClick(MouseEventArgs e, string value)
    {
       // isLoadingAnimation = true; // Активация индикатора загрузки

        try
        {
            await scriptBuilder.BuildScriptAsync(value);
           
        }
        finally
        {
            await JSRuntime.InvokeVoidAsync("animateCheckmark", e.ClientX, e.ClientY);
          //  isLoadingAnimation = false; // Деактивация индикатора загрузки
        }
    }

   


    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private IHttpContextAccessor HttpContextAccessor { get; set; }
    [Inject]
    private SignInManager<IdentityUser> SignInManager { get; set; }
 

    private ScriptBuilder scriptBuilder;

    private void Logout()
    {
        NavigationManager.NavigateTo("/Identity/Account/Manage/Index", forceLoad: true);
    }


    protected override void OnInitialized()
    {
        scriptBuilder = new ScriptBuilder(JSRuntime);
    }


    private IEnumerable<TabItem> GetAllSubTabs()
    {
        return TabVM.Tabs.SelectMany(tab => tab.SubTabs ?? new List<TabItem>());
    }

    private void CloseAddRecordDialog()
    {
        isAddRecordDialogOpen = false;
        InvokeAsync(StateHasChanged);

    }

    private void OpenAddRecordDialog()
    {
        isAddRecordDialogOpen = true;
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleRecordAdded(RecordModel newRecord)
    {
        CloseAddRecordDialog();

        if (tabRecords != null && selectedTab?.Id == newRecord.Id)
        {
            tabRecords = tabRecords.Append(newRecord);
        }
        await recordUpdateService.OnRecordsUpdated();

    }

    private void NavigateToXmlDisplay()
    {
        NavManager.NavigateTo("/xml-display");
    }

    private void NavigateToFavorite()
    {
        NavManager.NavigateTo("/");
    }


}