@using HelpfulHive.ViewModels
@using HelpfulHive.Models
@using HelpfulHive.Services
@using HelpfulHive.Pages
@inject TabViewModel TabVM
@inject NavigationManager NavManager
@inject RecordViewModel RecordVM
@inject TabService TabSrv
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService uSRV




@foreach (var tab in TabVM.Tabs)
{
    <div class="nav-item px-3" @onclick:preventDefault="true" @onclick="() => SelectTab(tab)">
        <NavLink class="@GetNavLinkClass(tab)" href="@tab.Uri">
            <span class="oi oi-list-rich" aria-hidden="true"></span> @tab.Name
        </NavLink>
        @if (tab.SubTabs != null && tab.SubTabs.Any())
        {
            <div class="sub-tabs">
                @foreach (var subTab in tab.SubTabs)
                {
                    <div @onclick:stopPropagation="true" @onclick:preventDefault="true">
                        <NavLink class="@GetNavLinkClass(subTab)" href="@subTab.Uri" @onclick="() => SelectSubTab(subTab)">
                            @subTab.Name
                        </NavLink>
                    </div>
                }
            </div>
        }
    </div>
}

<div class="content-area">

    <div class="dynamic-content-area">
        @if (selectedTab != null && tabRecords != null)
        {
            @foreach (var record in tabRecords)
            {
               <p>@record.Content</p>    
            }
        }
    </div>
</div>


<div class="nav-tabs">
    <div class="@GetTabClass(TabType.Personal)" @onclick="() => LoadTabs(TabType.Personal)">
        Personal Tabs
    </div>
    <div class="@GetTabClass(TabType.Common)" @onclick="() => LoadTabs(TabType.Common)">
        Common Tabs
    </div>
</div>





@if (isEditModalOpen)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Tab</h5>
                    <button type="button" class="btn-close" @onclick="() => isEditModalOpen = false"></button>
                </div>
                <div class="modal-body">
                    <input @bind="selectedTab.Name" placeholder="Tab Name" class="form-control" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => isEditModalOpen = false">Close</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteTab">Delete</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveTab">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isAddTabModalOpen)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Tab</h5>
                    <button type="button" class="btn-close" @onclick="ToggleAddTabModal"></button>
                </div>
                <div class="modal-body">
                    <input @bind="newTabName" placeholder="Tab Name" class="form-control" />
                    <select @bind="selectedParentTabId" class="form-control mt-2">
                        <option value="0">No Parent Tab</option>
                        @foreach (var tab in TabVM.Tabs)
                        {
                            <option value="@tab.Id">@tab.Name</option>
                        }
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ToggleAddTabModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTab">Add</button>
                </div>
            </div>
        </div>
    </div>
}

@if (activeTab == TabType.Personal || (activeTab == TabType.Common && IsUserInRole("Admin").Result) || (activeTab == TabType.Common && IsUserInRole("Moderator").Result))
{
    <button @onclick="ToggleAddTabModal" class="fab-button" aria-label="Добавить вкладку">
        <span class="fab-icon"></span>
        <span class="tooltip">Добавить вкладку</span>
    </button>
}


@if (selectedTab != null && (activeTab == TabType.Personal || (activeTab == TabType.Common && IsUserInRole("Admin").Result) || (activeTab == TabType.Common && IsUserInRole("Moderator").Result)))
{
    <div class="edit-button-position">
        <button @onclick="EditSelectedTab" class="edit-fab-button">
            <span class="fas fa-pencil-alt"></span> <!-- Иконка карандаша от Font Awesome -->
            <span class="tooltip">Редактировать вкладку</span>
        </button>
    </div>
}


@code {
    private bool isAddTabModalOpen = false;
    private string newTabName = "";
    private TabItem? selectedTab = null;
    private bool isEditModalOpen;
    private int selectedParentTabId = 0;

    private IEnumerable<RecordModel>? tabRecords = null;
    [Parameter]
    public EventCallback<TabItem> OnTabSelected { get; set; }
    private TabType activeTab = TabType.Personal;



  


    private async Task<bool> IsUserInRole(string role)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.IsInRole(role);
    }



    private string GetTabClass(TabType tabType)
    {
        return activeTab == tabType ? "active" : "";
    }

    private async Task LoadTabs(TabType tabType)
    {
        activeTab = tabType;
        TabVM.Tabs.Clear();
        await TabVM.LoadTabs(tabType);
    }

    protected override void OnInitialized()
    {
        TabVM.OnTabAdded += UpdateUI;
    }

    private async void SelectTab(TabItem tab)
    {
        selectedTab = tab;
        tabRecords = await TabSrv.GetRecordsByTabIdAsync(tab.Id);

    }

    private IEnumerable<TabItem> GetAllSubTabs()
    {
        return TabVM.Tabs.SelectMany(tab => tab.SubTabs ?? new List<TabItem>());
    }

    private void SelectSubTab(TabItem subTab)
    {
        selectedTab = subTab;  // обновляете выбранную вкладку
        var uri = $"/record-list/{subTab.Uri}";
        NavManager.NavigateTo(uri);
    }


    private string GetNavLinkClass(TabItem tab)
    {
        return selectedTab == tab ? "nav-link active" : "nav-link";
    }

    private void OnSubTabClick(TabItem subTab)
    {
        SelectSubTab(subTab);
    }

    private void EditSelectedTab()
    {
        isEditModalOpen = true;
    }

    private async void SaveTab()
    {
        await TabVM.UpdateTab(selectedTab); // вызываете метод обновления из ViewModel
        isEditModalOpen = false; // Закрываете модальное окно после сохранения
        StateHasChanged(); // Перерисовываете компонент
    }

    private async void DeleteTab()
    {
        if (await TabVM.DeleteTab(selectedTab)) // вызываете метод удаления из ViewModel
        {
            selectedTab = null; // Сбрасываете выбранную вкладку после удаления
            isEditModalOpen = false; // Закрываете модальное окно после удаления
            StateHasChanged(); // Перерисовываете компонент
        }
        else
        {
            // Показываете сообщение пользователю, что удаление невозможно (если это необходимо)
        }
    }

    private void UpdateUI()
    {
        StateHasChanged();
    }

    private void ToggleAddTabModal()
    {
        isAddTabModalOpen = !isAddTabModalOpen;
    }

    private async void AddTab()
    {
        var parentTab = (selectedParentTabId == 0) ? null : TabVM.Tabs.FirstOrDefault(t => t.Id == selectedParentTabId);
        var newTab = new TabItem
            {
                Name = newTabName,
                Uri = $"/{newTabName.Replace(" ", "")}",
                TabType = activeTab,  // передаём тип вкладки
                UserId = (activeTab == TabType.Personal) ? TabVM.UserId : null  // для личных вкладок передаём userId, для общих - null
            };
        await TabVM.AddTab(newTab, parentTab);
        newTabName = "";
        selectedParentTabId = 0;
        ToggleAddTabModal();
    }


    public void Dispose()
    {
        TabVM.OnTabAdded -= UpdateUI;
    }
}
