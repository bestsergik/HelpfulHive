@using HelpfulHive.ViewModels
@using HelpfulHive.Models
@using HelpfulHive.Services
@using HelpfulHive.Pages
@inject TabViewModel TabVM
@inject NavigationManager NavManager
@inject RecordViewModel RecordVM
@inject RecordService rSRV
@inject TabService TabSrv
@inject UserPreferencesService upSRV
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService uSRV
@inject IJSRuntime JsRuntime




<div class="tab-button-container">
    <div class="tab-button @GetModernTabClass(TabType.Personal)" @onclick="() => LoadTabs(TabType.Personal)">
        Личные
    </div>
    <div class="tab-button @GetModernTabClass(TabType.Common)" @onclick="() => LoadTabs(TabType.Common)">
        Общие
    </div>
</div>

<br>
<div class="modern-tab-content">
    @foreach (var tab in TabVM.Tabs)
    {
        var tabNewRecordCount = newTabRecordCounts.GetValueOrDefault(tab.Id, 0);
        var tabClass = tabNewRecordCount > 0 ? "tab-new-indicator" : ""; // Класс для визуальной индикации новых записей

        <div class="modern-tab-item @tabClass" @onclick:preventDefault="true" @onclick="() => SelectTab(tab)">
            <NavLink style="color: antiquewhite; font-size: 18px; font-family: 'NavMenuParentLinkFont';" class="@GetModernNavLinkClass(tab)" href="@tab.Uri">
                @TruncateString(tab.Name, 40)
                @if (tabNewRecordCount > 0)
                {
                    <span class="new-record-count">@tabNewRecordCount</span> <!-- Индикатор количества непросмотренных записей -->
                }
            </NavLink>

            @if (tab.SubTabs != null && tab.SubTabs.Any() && tabsVisibility.ContainsKey(tab.Id) && tabsVisibility[tab.Id])
            {
                <div id="sub-tabs-@tab.Id" class="modern-sub-tabs">
                    @foreach (var subTab in tab.SubTabs)
                    {
                        var subTabNewRecordCount = newTabRecordCounts.GetValueOrDefault(subTab.Id, 0);
                        var subTabClass = subTabNewRecordCount > 0 ? "sub-tab-new-indicator" : ""; // Класс для визуальной индикации новых записей

                        <div class="@subTabClass" @onclick:stopPropagation="true" @onclick:preventDefault="true" style="@GetSubTabStyle(subTab)">
                            <NavLink style="color: antiquewhite; font-size: 17px; font-family: 'NavMenuChildtLinkFont';" class="@GetModernNavLinkClass(subTab)" href="@subTab.Uri" @onclick="() => SelectSubTab(subTab)">
                                @TruncateString(subTab.Name, 44)
                                @if (subTabNewRecordCount > 0)
                                {
                                    <span class="new-record-count">@subTabNewRecordCount</span> <!-- Индикатор количества непросмотренных записей -->
                                }
                            </NavLink>
                        </div>
                    }
                </div>
            }
        </div>
    }


 
</div>


<div class="content-area">
    <div class="dynamic-content-area">
        @if (selectedTab != null && tabRecords != null)
        {
            @foreach (var record in tabRecords)
            {
                <p>@record.Content</p>
            }
        }
    </div>
</div>



@if (isEditModalOpen)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Редактировать вкладку</h5>
                    <button type="button" class="btn-close" @onclick="() => isEditModalOpen = false"></button>
                </div>
                <div class="modal-body">
                    <input @bind="selectedTab.Name" placeholder="Название вкладки" class="form-control" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => isEditModalOpen = false">Закрыть</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteTab">Удалить</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveTab">Сохранить</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isAddTabModalOpen)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Новая вкладка</h5>
                    <button type="button" class="btn-close" @onclick="ToggleAddTabModal"></button>
                </div>
                <div class="modal-body">
                    <input @bind="newTabName" placeholder="Название вкладки" class="form-control" />
                    <select @bind="selectedParentTabId" class="form-control mt-2">
                        <option value="0">Выбрать родительскую вкладку</option>
                        @foreach (var tab in TabVM.Tabs)
                        {
                            <option value="@tab.Id">@tab.Name</option>
                        }
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ToggleAddTabModal">Закрыть</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTab">Добавить вкладку</button>
                </div>
            </div>
        </div>
    </div>
}

@if (activeTab == TabType.Personal || (activeTab == TabType.Common && IsUserInRole("Admin").Result) || (activeTab == TabType.Common && IsUserInRole("Moderator").Result))
{
    <button @onclick="ToggleAddTabModal" class="fab-button" aria-label="Добавить вкладку">
        <span class="fab-icon"></span>
        <span class="tooltip">Добавить вкладку</span>
    </button>
}


@if (selectedTab != null && (activeTab == TabType.Personal || (activeTab == TabType.Common && IsUserInRole("Admin").Result) || (activeTab == TabType.Common && IsUserInRole("Moderator").Result)))
{
    <div class="edit-button-position">
        <button @onclick="EditSelectedTab" class="edit-fab-button">
            <span class="fas fa-pencil-alt"></span> <!-- Иконка карандаша от Font Awesome -->
            <span class="tooltip">Редактировать вкладку</span>
        </button>
    </div>
}



@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="error-message">
        @errorMessage
        <button class="error-close-button" @onclick="() => errorMessage = string.Empty">Закрыть</button>
    </div>
}



@code {
    private bool isAddTabModalOpen = false;
    private string newTabName = "";
    private TabItem? selectedTab = null;
    private bool isEditModalOpen;
    private int selectedParentTabId = 0;

    private IEnumerable<RecordModel>? tabRecords = null;
    [Parameter]
    public EventCallback<TabItem> OnTabSelected { get; set; }
    private TabType activeTab = TabType.Personal;
    private string errorMessage = string.Empty;
    private int? selectedTabId = null;
    private int? selectedSubTabId = null;
    private TabItem? currentlySelectedTab = null;

    private async Task<bool> IsUserInRole(string role)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.IsInRole(role);
    }

    private async Task<Dictionary<int, int>> GetTabNewRecordIndicators(string userId)
    {
        var userPreferences = await upSRV.GetUserPreferences(userId);
        var newTabRecordCounts = new Dictionary<int, int>();

        foreach (var preference in userPreferences)
        {
            if (!preference.HasViewedNewCommonRecord)
            {
                var records = await rSRV.GetRecordsByUserAndTabTypeAsync(true, userId);
                foreach (var record in records)
                {
                    if (record.Id == preference.RecordId)
                    {
                        // Увеличиваем счетчик для подвкладки
                        int subTabId = record.SubTabId;
                        newTabRecordCounts[subTabId] = newTabRecordCounts.GetValueOrDefault(subTabId) + 1;

                        // Увеличиваем счетчик для родительской вкладки, если она есть
                        if (record.SubTab.ParentTabId != null)
                        {
                            int parentTabId = record.SubTab.ParentTabId.Value;
                            newTabRecordCounts[parentTabId] = newTabRecordCounts.GetValueOrDefault(parentTabId) + 1;
                        }
                    }
                }
            }
        }

        return newTabRecordCounts;
    }



    private Dictionary<int, int> newTabIndicators = new Dictionary<int, int>();


    private Dictionary<int, bool> tabsVisibility = new Dictionary<int, bool>();
    private Dictionary<int, int> newTabRecordCounts = new Dictionary<int, int>();





    private async Task InitializeNewTabIndicators(string userId)
    {
        var userPreferences = await upSRV.GetUserPreferences(userId);
        var records = await rSRV.GetRecordsByUserAndTabTypeAsync(true, userId);
        Console.WriteLine($"[InitializeNewTabIndicators] Загружено {records.Count} записей");

        var newTabRecordCounts = new Dictionary<int, int>();

        foreach (var record in records)
        {
            if (!userPreferences.Any(up => up.RecordId == record.Id && up.HasViewedNewCommonRecord))
            {
                // Увеличиваем счетчик для подвкладки
                int subTabId = record.SubTabId;
                newTabRecordCounts[subTabId] = newTabRecordCounts.GetValueOrDefault(subTabId) + 1;

                // Увеличиваем счетчик для родительской вкладки, если она есть
                if (record.SubTab.ParentTabId.HasValue)
                {
                    int parentTabId = record.SubTab.ParentTabId.Value;
                    newTabRecordCounts[parentTabId] = newTabRecordCounts.GetValueOrDefault(parentTabId) + 1;
                }
            }
        }

        foreach (var kvp in newTabRecordCounts)
        {
            Console.WriteLine($"[NewTabIndicators] TabID: {kvp.Key}, UnviewedCount: {kvp.Value}");
        }

        // Теперь newTabRecordCounts содержит количество непросмотренных записей для каждой вкладки
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (!string.IsNullOrEmpty(userId))
        {
            await InitializeNewTabIndicators(userId);
           // newTabIndicators = await GetTabNewRecordIndicators(userId);
            newTabRecordCounts = await upSRV.GetUnviewedRecordsCountByTab(userId);

            // Дополнительная логика инициализации...
        }
    }


    private string TruncateString(string input, int length)
    {
        if (string.IsNullOrEmpty(input) || input.Length <= length)
        {
            return input;
        }

        return input.Substring(0, length) + "..";
    }

    private string GetModernTabClass(TabType tabType)
    {
        return activeTab == tabType ? "active" : "";
    }

    private async Task LoadTabs(TabType tabType)
    {
        activeTab = tabType;
        TabVM.Tabs.Clear();
        await TabVM.LoadTabs(tabType);
    }

    protected override void OnInitialized()
    {
        foreach (var tab in TabVM.Tabs)
        {
            InitializeTabVisibility(tab);
        }

        TabVM.OnTabAdded += UpdateUI;
    }

    private void InitializeTabVisibility(TabItem tab)
    {
        if (!tabsVisibility.ContainsKey(tab.Id))
        {
            tabsVisibility[tab.Id] = false; // По умолчанию вкладки скрыты
        }
    }


    private async void SelectTab(TabItem tab)
    {
        foreach (var key in tabsVisibility.Keys.ToList())
        {
            tabsVisibility[key] = false;
        }

        // Отображаем подвкладки для выбранной вкладки
        tabsVisibility[tab.Id] = true;

        selectedTabId = tab.Id;

        selectedTab = tab;
        tabRecords = await TabSrv.GetRecordsByTabIdAsync(tab.Id);
        await JsRuntime.InvokeVoidAsync("toggleSubTabs", tab.Id);

        StateHasChanged(); // Явно вызывает перерисовку компонента

    }

    private IEnumerable<TabItem> GetAllSubTabs()
    {
        return TabVM.Tabs.SelectMany(tab => tab.SubTabs ?? new List<TabItem>());
    }

    private void SelectSubTab(TabItem subTab)
    {

        selectedSubTabId = subTab.Id;

        selectedTab = subTab;  // обновляете выбранную вкладку
        var uri = $"/record-list/{subTab.Uri}";
        NavManager.NavigateTo(uri);
    }

    private string GetTabStyle(TabItem tab)
    {
        if (selectedTabId == tab.Id || selectedSubTabId == tab.Id)
        {
            return "box-shadow: 0 0 10px #8fd3f4, 0 0 15px #8fd3f4;"; // Стиль для выбранной вкладки
        }
        return "";
    }


    private string GetSubTabStyle(TabItem subTab)
    {
        if (selectedSubTabId == subTab.Id)
        {
            return "box-shadow: 0 0 7px #8fd3f4, 0 0 9px #8fd3f4;"; // Стиль для выбранной подвкладки
        }
        return "";
    }




    private string GetModernNavLinkClass(TabItem tab)
    {
        return selectedTab == tab ? "nav-link active" : "nav-link";
    }



    private void OnSubTabClick(TabItem subTab)
    {
        SelectSubTab(subTab);
    }

    private void EditSelectedTab()
    {
        isEditModalOpen = true;
    }

    private async void SaveTab()
    {
        errorMessage = string.Empty;

        // Проверка на пустое название вкладки
        if (string.IsNullOrWhiteSpace(selectedTab.Name))
        {
            errorMessage = "Название вкладки не может быть пустым";
            return;
        }

        await TabVM.UpdateTab(selectedTab); // вызываете метод обновления из ViewModel
        isEditModalOpen = false; // Закрываете модальное окно после сохранения
        StateHasChanged(); // Перерисовываете компонент
    }



    private async void DeleteTab()
    {
        try
        {
            errorMessage = string.Empty;

            bool isDeleted = await TabVM.DeleteTab(selectedTab);

            if (isDeleted)
            {
                selectedTab = null;
                isEditModalOpen = false;
                StateHasChanged();
            }
            else
            {
                if (selectedTab.SubTabs != null && selectedTab.SubTabs.Any())
                {
                    errorMessage = "Не удалось удалить вкладку, так как она содержит подвкладки";
                }
                else
                {
                    errorMessage = "Не удалось удалить вкладку, так как она содержит записи";
                }
            }
        }
        catch
        {

        }

    }


    private void UpdateUI()
    {
        StateHasChanged();
    }

    private void ToggleAddTabModal()
    {
        isAddTabModalOpen = !isAddTabModalOpen;
    }

    private async void AddTab()
    {
        // Очистка предыдущего сообщения об ошибке
        errorMessage = string.Empty;

        // Проверка на пустое название вкладки
        if (string.IsNullOrWhiteSpace(newTabName))
        {
            errorMessage = "Название вкладки не может быть пустым";
            return;
        }

        // Далее идет логика добавления вкладки, как у вас уже было реализовано
        var parentTab = (selectedParentTabId == 0) ? null : TabVM.Tabs.FirstOrDefault(t => t.Id == selectedParentTabId);
        var newTab = new TabItem
            {
                Name = newTabName,
                Uri = $"/{newTabName.Replace(" ", "")}",
                TabType = activeTab,
                UserId = (activeTab == TabType.Personal) ? TabVM.UserId : null
            };
        await TabVM.AddTab(newTab, parentTab);
        newTabName = "";
        selectedParentTabId = 0;
        ToggleAddTabModal();
        StateHasChanged(); // Явно обновить состояние компонента
    }



    public void Dispose()
    {
        TabVM.OnTabAdded -= UpdateUI;
    }
}
