@page "/xml-display"
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@using System.Xml.Linq   
@using System.Text.RegularExpressions;

@inject IJSRuntime JSRuntime



<div class="xml-tabs">
    <!-- Верхние табы для XML документов -->
    <ul class="nav nav-pills mb-3" id="xmlTabList" role="tablist">
        @foreach (var tab in xmlTabs)
        {
            var tabId = $"xmlTab{tab.Id}";
            <li class="nav-item">
                <a class="nav-link @(tab.IsActive ? "active" : "")" id="@tabId-tab" @onclick="() => SetActiveTab(tab)" role="tab" aria-controls="@tabId" aria-selected="true">@tab.Name</a>
            </li>
        }
        <li class="nav-item">
            <button class="btn btn-primary" @onclick="AddTab">+</button>
        </li>
    </ul>

    <!-- Содержимое табов для XML документов -->
    <div class="tab-content" id="xmlTabContent">
        @foreach (var tab in xmlTabs)
        {
            var tabId = $"xmlTab{tab.Id}";
            <div class="tab-pane fade @(tab.IsActive ? "show active" : "")" id="@tabId" role="tabpanel" aria-labelledby="@tabId-tab">
                <div class="row">

                    <div class="col-md-6">
                        <StandaloneCodeEditor @ref="tab.SendEditorRef" ConstructionOptions="EditorConstructionOptions" OnKeyUp="@(async () => await FormatXmlOnPaste(tab.SendEditorRef, tab.SendEditorRef, tab.CheckEditorRef))" />
                    </div>
                    <div class="col-md-6">
                        <StandaloneCodeEditor @ref="tab.CheckEditorRef" ConstructionOptions="EditorConstructionOptions" OnKeyUp="@(async () => await FormatXmlOnPaste(tab.CheckEditorRef, tab.SendEditorRef, tab.CheckEditorRef))" />
                    </div>

                </div>
                <button @onclick="() => FormatXml(tab)">Format XML</button>
            </div>
        }
    </div>
</div>

@code {
    private List<XmlTab> xmlTabs = new List<XmlTab>
{
    new XmlTab { Id = 1, Name = "Tab 1", IsActive = true }
};

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Value = "",
                Language = "xml",
                Theme = "vs-dark"
            };
    }


    private async Task FormatXmlOnPaste(StandaloneCodeEditor editor, StandaloneCodeEditor sendEditor, StandaloneCodeEditor checkEditor)
    {
        // Получение значения из буфера обмена или редактора
        string xml = await editor.GetValue();

        Console.WriteLine($"Original XML: {xml}");

        // Разделение XML документов
        List<string> sendDocuments = new List<string>();
        List<string> checkDocuments = new List<string>();

        // Разделение входных данных на отдельные документы
        string[] documents = Regex.Split(xml, @"(?=<Send)|(?=<Check)");
        foreach (var doc in documents)
        {
            var trimmedDoc = doc.Trim();
            Console.WriteLine($"Trimmed doc: {trimmedDoc}");

            if (trimmedDoc.StartsWith("<Send"))
            {
                sendDocuments.Add(trimmedDoc);
            }
            else if (trimmedDoc.StartsWith("<Check"))
            {
                checkDocuments.Add(trimmedDoc);
            }
        }

        // Обработка документов типа Send
        foreach (var doc in sendDocuments)
        {
            try
            {
                Console.WriteLine($"Processing Send doc: {doc}");
                var xDoc = XDocument.Parse(doc);
                string formattedXml = xDoc.ToString();
                Console.WriteLine($"Formatted Send doc: {formattedXml}");

                string currentContent = await sendEditor.GetValue();
                await sendEditor.SetValue(currentContent + "\n" + formattedXml);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error formatting Send XML: {ex.Message}");
            }
        }

        // Обработка документов типа Check
        foreach (var doc in checkDocuments)
        {
            try
            {
                Console.WriteLine($"Processing Check doc: {doc}");
                var xDoc = XDocument.Parse(doc);
                string formattedXml = xDoc.ToString();
                Console.WriteLine($"Formatted Check doc: {formattedXml}");

                string currentContent = await checkEditor.GetValue();
                await checkEditor.SetValue(currentContent + "\n" + formattedXml);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error formatting Check XML: {ex.Message}");
            }
        }
    }


    private async Task FormatXml(XmlTab tab)
    {
        try
        {
            string sendXml = await tab.SendEditorRef.GetValue();
            var sendDoc = XDocument.Parse(sendXml);
            string formattedSendXml = sendDoc.ToString();
            await tab.SendEditorRef.SetValue(formattedSendXml);

            string checkXml = await tab.CheckEditorRef.GetValue();
            var checkDoc = XDocument.Parse(checkXml);
            string formattedCheckXml = checkDoc.ToString();
            await tab.CheckEditorRef.SetValue(formattedCheckXml);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error formatting XML: {ex.Message}");
        }
    }



    private void AddTab()
    {
        var newTab = new XmlTab
            {
                Id = xmlTabs.Max(t => t.Id) + 1,
                Name = $"Tab {xmlTabs.Count + 1}",
                IsActive = true
            };

        xmlTabs.ForEach(t => t.IsActive = false);
        xmlTabs.Add(newTab);
    }

    private void SetActiveTab(XmlTab activeTab)
    {
        xmlTabs.ForEach(t => t.IsActive = false);
        activeTab.IsActive = true;
    }

    private class XmlTab
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool IsActive { get; set; }
        public StandaloneCodeEditor SendEditorRef = new StandaloneCodeEditor();
        public StandaloneCodeEditor CheckEditorRef = new StandaloneCodeEditor();
    }

}
