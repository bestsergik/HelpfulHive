@using HelpfulHive.Models
@using HelpfulHive.ViewModels
@using HelpfulHive.Services
@inject RecordViewModel RecordVM
@inject ImageService ImageService
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (IsVisible)
{
    <div class="modal" tabindex="-1" style="display:block!important;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Record</h5>
                </div>
                <div class="modal-body">
                    <input @bind="RecordToEdit.Title" type="text" class="form-control" placeholder="Record Title" />
                    <textarea @bind="RecordToEdit.Content" class="form-control mt-3" placeholder="Record Content"></textarea>

                    @if (AvailableSubTabs == null)
                    {
                        <p>Loading tabs...</p>
                    }
                    else if (!AvailableSubTabs.Any())
                    {
                        <p>No tabs available.</p>
                    }
                    else
                    {
                        <select @bind="RecordToEdit.SubTabId" class="form-control mt-3">
                            @foreach (var subTab in AvailableSubTabs)
                            {
                                <option value="@subTab.Id">@subTab.Name</option>
                            }
                        </select>
                    }

                    @if (AvailableImages != null && AvailableImages.Any())
                    {
                        <div class="image-grid">
                            @foreach (var image in AvailableImages)
                            {
                                <div @onclick="() => SelectImage(image)" class="image-container">
                                    <img src="@($"images/{image}")" alt="@image" class="image-thumbnail" />
                                    <div class="image-title">@image</div>
                                </div>
                            }
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(RecordToEdit.ImagePath))
                    {
                        <div class="selected-image-container">
                            <h5>Selected Image:</h5>
                            <img src="@($"images/{RecordToEdit.ImagePath}")" alt="Selected Image" class="selected-image" />
                        </div>
                    }

                </div>
                <div class="modal-footer">
                    @if (ShowDeleteButton())
                    {
                        <button @onclick="DeleteRecord" class="btn btn-danger">Delete</button>
                    }
                    <button @onclick="CloseDialog" class="btn btn-secondary">Cancel</button>
                    @if (ShowSaveButton())
                    {
                        <button @onclick="SaveChanges" class="btn btn-primary">Save Changes</button>
                    }
                </div>

            </div>
        </div>
    </div>
}

@if (ShowConfirmationDialog)
{
    <div class="modal" tabindex="-1" style="display:block!important;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this record?</p>
                </div>
                <div class="modal-footer">
                    <button @onclick="ConfirmDelete" class="btn btn-danger">Yes</button>
                    <button @onclick="CloseConfirmationDialog" class="btn btn-secondary">No</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public RecordModel RecordToEdit { get; set; }
    [Parameter] public EventCallback OnEditDialogClosed { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public IEnumerable<TabItem> AvailableSubTabs { get; set; } = new List<TabItem>();

    private bool ShowConfirmationDialog { get; set; } = false;


    private void DeleteRecord()
    {
        ShowConfirmationDialog = true;
    }


    private async Task<bool> IsUserInRole(string role)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.IsInRole(role);
    }

    private bool ShowDeleteButton()
    {
        if (RecordToEdit.SubTab.TabType == TabType.Personal)
        {
            return true;
        }

        if (RecordToEdit.SubTab.TabType == TabType.Common && IsUserInRole("Admin").Result)
        {
            return true;
        }

        return false;
    }

    private bool ShowSaveButton()
    {
        return ShowDeleteButton();
    }

    private List<string> AvailableImages { get; set; } = new List<string>();

    protected override void OnInitialized()
    {
        AvailableImages = ImageService.GetImageNames();
    }

    private void SelectImage(string imageName)
    {
        RecordToEdit.ImagePath = imageName;
    }

    private async Task SaveChanges()
    {
        await RecordVM.UpdateRecordAsync(RecordToEdit);
        CloseDialog();
    }

    private async Task ConfirmDelete()
    {
        await RecordVM.DeleteRecordAsync(RecordToEdit);
        ShowConfirmationDialog = false;
        CloseDialog();
    }

    private void CloseConfirmationDialog()
    {
        ShowConfirmationDialog = false;
    }


    private void CloseDialog()
    {
        IsVisible = false;
        OnEditDialogClosed.InvokeAsync(null);
    }
}
