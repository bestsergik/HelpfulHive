@using HelpfulHive.Models
@using HelpfulHive.ViewModels
@using HelpfulHive.Services
@using System.Security.Claims
@inject RecordViewModel RecordVM
@inject ImageService ImageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserPreferencesViewModel upVM
@inject IJSRuntime JSRuntime



@if (IsVisible)
{
    <div class="modal" tabindex="-1" style="display:block!important;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Record</h5>
                    <button type="button" class="btn btn-link" @onclick="() => ToggleFavorite(RecordToEdit.Id)">
                        <img class="favorite-icon" src="@(isFavorite ? "/serviceimages/favoritRecord.png" : "/serviceimages/notFavoritRecord.png")" alt="Favorite" />
                    </button>
                </div>


                <div class="modal-body">
                    <input @bind="RecordToEdit.Title" type="text" class="form-control" placeholder="Record Title" />
                    <div class="editor">
                        <div id="content" contenteditable="true" @ref="editorRef" class="form-control mt-3" style="height: 200px;" @onpaste="HandlePaste"></div>
                    </div>

                    @if (AvailableSubTabs == null)
                    {
                        <p>Loading tabs...</p>
                    }
                    else if (!AvailableSubTabs.Any())
                    {
                        <p>No tabs available.</p>
                    }
                    else
                    {
                        <select @bind="RecordToEdit.SubTabId" class="form-control mt-3">
                            @foreach (var subTab in AvailableSubTabs)
                            {
                                <option value="@subTab.Id">@subTab.Name</option>
                            }
                        </select>
                    }

                    @if (AvailableImagesByFolders != null && AvailableImagesByFolders.Any())
                    {
                        <div class="tab-container">
                            @foreach (var folder in AvailableImagesByFolders.Keys)
                            {
                                <button class="tab" @onclick="() => SelectFolder(folder)">
                                    @folder
                                </button>
                            }
                        </div>

                        <div class="image-grid">
                            @if (AvailableImagesByFolders.ContainsKey(SelectedFolder))
                            {
                                @foreach (var image in AvailableImagesByFolders[SelectedFolder])
                                {
                                    <div @onclick="() => SelectImage(image)" class="image-container">
                                        <img src="@($"images/{SelectedFolder}/{image}")" alt="@image" class="image-thumbnail" />
                                        <div class="image-title">@image</div>
                                    </div>
                                }
                            }
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(RecordToEdit.ImagePath))
                    {
                        <div class="selected-image-container">
                            <h5>Selected Image:</h5>
                            <img src="@($"images/{SelectedFolder}/{RecordToEdit.ImagePath}")" alt="Selected Image" class="selected-image" />
                        </div>
                    }

                </div>
                <div class="modal-footer">
                    @if (ShowDeleteButton())
                    {
                        <button @onclick="DeleteRecord" class="btn btn-danger">Delete</button>
                    }
                    <button @onclick="CloseDialog" class="btn btn-secondary">Cancel</button>
                    @if (ShowSaveButton())
                    {
                        <button @onclick="SaveChanges" class="btn btn-primary">Save Changes</button>
                    }
                </div>

            </div>
        </div>
    </div>
}

@if (ShowConfirmationDialog)
{
    <div class="modal" tabindex="-1" style="display:block!important;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this record?</p>
                </div>
                <div class="modal-footer">
                    <button @onclick="ConfirmDelete" class="btn btn-danger">Yes</button>
                    <button @onclick="CloseConfirmationDialog" class="btn btn-secondary">No</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public RecordModel RecordToEdit { get; set; }
    [Parameter] public EventCallback OnEditDialogClosed { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public IEnumerable<TabItem> AvailableSubTabs { get; set; } = new List<TabItem>();

   
    private bool isFavorite;
    private ElementReference editorRef;


    private async Task HandlePaste(Microsoft.AspNetCore.Components.Web.ClipboardEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("insertImageFromClipboard", editorRef, e);
    }


    private Dictionary<string, List<string>> AvailableImagesByFolders { get; set; }
    private string SelectedFolder { get; set; } 
    private bool ShowConfirmationDialog { get; set; } = false;

    protected override void OnParametersSet()
    {
        AvailableImagesByFolders = ImageService.GetImagesByFolders();

        if (RecordToEdit != null && !string.IsNullOrEmpty(RecordToEdit.ImagePath))
        {
            SelectedFolder = FindFolderForImage(RecordToEdit.ImagePath) ?? AvailableImagesByFolders.Keys.FirstOrDefault();
            UpdateFavoriteStatus();
        }
        else
        {
            SelectedFolder = AvailableImagesByFolders.Keys.FirstOrDefault();
        }
    }


    private async void UpdateFavoriteStatus()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            isFavorite = await upVM.IsFavoriteAsync(user.FindFirst(ClaimTypes.NameIdentifier)?.Value, RecordToEdit.Id);
            StateHasChanged();
        }
    }

    private async Task ToggleFavorite(int recordId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (userId != null)
        {
            await upVM.ToggleFavoriteAsync(userId, recordId);

            // Обновите состояние "isFavorite"
            isFavorite = await upVM.IsFavoriteAsync(userId, recordId);

            StateHasChanged();
        }
    }

    private string FindFolderForImage(string imageName)
    {
        foreach (var folder in AvailableImagesByFolders)
        {
            if (folder.Value.Contains(imageName))
            {
                return folder.Key;
            }
        }
        return null;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            if (RecordToEdit != null)
            {
                isFavorite = await upVM.IsFavoriteAsync(user.Identity.Name, RecordToEdit.Id);
            }
            else
            {
                // Обработка случая, когда RecordToEdit равно null
            }
        }
        else
        {
            isFavorite = false;
        }
    }

    private void SelectFolder(string folder)
    {
        SelectedFolder = folder;
    }

    private void DeleteRecord()
    {
        ShowConfirmationDialog = true;
    }

    private async Task<bool> IsUserInRole(string role)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.IsInRole(role);
    }

    private bool ShowDeleteButton()
    {
        if (RecordToEdit.SubTab.TabType == TabType.Personal)
        {
            return true;
        }

        if (RecordToEdit.SubTab.TabType == TabType.Common && IsUserInRole("Admin").Result)
        {
            return true;
        }

        return false;
    }

    private bool ShowSaveButton()
    {
        return ShowDeleteButton();
    }

    private void SelectImage(string imageName)
    {
        RecordToEdit.ImagePath = imageName;
    }

    private async Task SaveChanges()
    {
        await RecordVM.UpdateRecordAsync(RecordToEdit);
        CloseDialog();
    }

    private async Task ConfirmDelete()
    {
        await RecordVM.DeleteRecordAsync(RecordToEdit);
        ShowConfirmationDialog = false;
        CloseDialog();
    }

    private void CloseConfirmationDialog()
    {
        ShowConfirmationDialog = false;
    }

    private void CloseDialog()
    {
        IsVisible = false;
        OnEditDialogClosed.InvokeAsync(null);
    }
}


