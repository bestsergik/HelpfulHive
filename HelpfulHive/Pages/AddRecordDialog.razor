@using HelpfulHive.Models;
@using HelpfulHive.ViewModels
@using Newtonsoft.Json;
@using HelpfulHive.Services
@using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.EntityFrameworkCore.ChangeTracking;
@inject RecordViewModel RecordVM
@inject ImageService ImageService
@inject IJSRuntime JSRuntime




@if (IsVisible)
{
    <div class="add-record-modal" tabindex="-1" >
        <div class="modal-dialog">
            <div class="add-record-modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Record</h5>
                </div>
                <div class="modal-body">
                    <input @bind="NewRecordTitle" type="text" class="form-control" placeholder="Record Title" />
                    @if (string.IsNullOrEmpty(NewRecordTitle) && showErrorMessage)
                    {
                        <div class="text-danger">Please enter the title.</div>
                    }
                    <div class="editor">
                        <div id="content" contenteditable="true" @ref="editorRef" class="form-control mt-3" style="height: 200px;" @onpaste="HandlePaste"></div>
                    </div>
                    @if (string.IsNullOrEmpty(NewRecordContentObject.Text) && showErrorMessage)
                    {
                        <div class="text-danger">Please enter the content.</div>
                    }

                    @if (AvailableSubTabs == null)
                    {
                        <p>Loading tabs...</p>
                    }
                    else if (!AvailableSubTabs.Any())
                    {
                        <p>No tabs available.</p>
                    }
                    else
                    {
                        <select @bind="SelectedSubTabId" class="form-control mt-3">
                            @foreach (var subTab in AvailableSubTabs)
                            {
                                <option value="@subTab.Id">@subTab.Name</option>
                            }
                        </select>
                        @if (SelectedSubTabId == 0 && showErrorMessage)
                        {
                            <div class="text-danger">Please select a sub-tab.</div>
                        }
                    }
                    @if (AvailableImagesByFolders != null && AvailableImagesByFolders.Any())
                    {
                        <div class="tab-container">
                            @foreach (var folder in AvailableImagesByFolders.Keys)
                            {
                                <button class="tab" @onclick="() => SelectFolder(folder)">
                                    @folder
                                </button>
                            }
                        </div>

                        <div class="image-grid">
                            @if (AvailableImagesByFolders.ContainsKey(SelectedFolder))
                            {
                                @foreach (var image in AvailableImagesByFolders[SelectedFolder])
                                {
                                    <div @onclick="() => SelectImage(image)" class="image-container">
                                        <img src="@($"images/{SelectedFolder}/{image}")" alt="@image" class="image-thumbnail" />
                                        <div class="image-title">@image</div>
                                    </div>
                                }
                            }
                        </div>
                        @if (string.IsNullOrEmpty(SelectedImage) && showErrorMessage)
                        {
                            <div class="text-danger">Please select an image.</div>
                        }
                    }

                    @if (!string.IsNullOrEmpty(SelectedImage))
                    {
                        <div class="selected-image-container">
                            <h5>Selected Image:</h5>
                            <img src="@($"images/{SelectedFolder}/{SelectedImage}")" alt="Selected Image" class="selected-image" />
                        </div>
                    }

                </div>
                <div class="modal-footer">
                    <button @onclick="Close" class="btn btn-secondary">Cancel</button>
                    <button @onclick="AddRecord" class="btn btn-primary">Add Record</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<RecordModel> OnRecordAdded { get; set; }
    [Parameter] public IEnumerable<TabItem> AvailableSubTabs { get; set; } = new List<TabItem>();
    [Parameter] public EventCallback OnCloseDialog { get; set; }
    [Parameter] public TabItem SelectedTab { get; set; }

    private Dictionary<string, List<string>> AvailableImagesByFolders { get; set; }
    private string SelectedFolder { get; set; }
    private string SelectedImage { get; set; } = "";
    private string NewRecordTitle { get; set; } = string.Empty;
    private string NewRecordContent { get; set; } = string.Empty;
    private int SelectedSubTabId { get; set; }
    private bool showErrorMessage = false;
    private RecordContent NewRecordContentObject { get; set; } = new RecordContent();

    private ElementReference editorRef;


    private async Task HandlePaste(Microsoft.AspNetCore.Components.Web.ClipboardEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("insertImageFromClipboard", editorRef, e);
    }


    private async Task UpdateContentText()
    {
        var text = await JSRuntime.InvokeAsync<string>("getContentText", editorRef);
        NewRecordContentObject.Text = text;
    }

  

    protected override void OnInitialized()
    {
        AvailableImagesByFolders = ImageService.GetImagesByFolders();
        SelectedFolder = AvailableImagesByFolders.Keys.First();
    }

    private async Task Close()
    {
        IsVisible = false;  // Добавьте эту строку
        await IsVisibleChanged.InvokeAsync(false);
        await OnCloseDialog.InvokeAsync(); // Это событие должно вызываться
        await InvokeAsync(StateHasChanged);
    }

    private void SelectFolder(string folder)
    {
        SelectedFolder = folder;
    }

    private void SelectImage(string imageName)
    {
        SelectedImage = imageName ?? ""; 
    }


   



    // Функция для проверки валидности Base64 строки
    public bool IsValidBase64String(string s)
    {
        s = s.Trim();
        try
        {
            // Попробуйте конвертировать строку в массив байтов
            var bytes = Convert.FromBase64String(s);
            return true;
        }
        catch (FormatException)
        {
            // Если возникла ошибка формата, значит строка не является валидной Base64 строкой
            return false;
        }
    }

  
    private async Task AddRecord()
    {
        await UpdateContentText();

        if (string.IsNullOrEmpty(NewRecordTitle) ||
            string.IsNullOrEmpty(NewRecordContentObject.Text) ||
            SelectedSubTabId == 0)
        {
            showErrorMessage = true;
            StateHasChanged();
            return;
        }

        var imagePath = "content_images";

        var contentText = NewRecordContentObject.Text;
        var base64ImagePattern = @"data:image\/[a-zA-Z]+;base64,([A-Za-z0-9+/=]+)";
        var matches = Regex.Matches(contentText, base64ImagePattern);
        var imageUrls = new List<string>();
        Console.WriteLine($"1-----------------------------Found {matches.Count} base64 images");

        foreach (Match match in matches)
        {
            // Извлекаем группу, содержащую только Base64 строку
            var base64Image = match.Groups[1].Value;
            Console.WriteLine($"2-------------------------------Checking if base64 string is valid");

            if (IsValidBase64String(base64Image))
            {
                Console.WriteLine($"-------------Base64 image content: {base64Image}");

                var imageUrl = await ImageService.SaveImageAsync(base64Image, imagePath);
                contentText = contentText.Replace(match.Value, imageUrl);
                imageUrls.Add(imageUrl);
            }
            else
            {
                Console.WriteLine("----------------Base64 string is invalid");
            }
        }

      
        NewRecordContentObject.Text = contentText;
        NewRecordContentObject.ImageUrls = imageUrls.ToList();  

        var newRecord = new RecordModel
            {
                Title = NewRecordTitle,
                Content = NewRecordContentObject,
                SubTabId = SelectedSubTabId,
                ImagePath = SelectedImage
            };

        await RecordVM.AddRecordAsync(newRecord);
        await OnRecordAdded.InvokeAsync(newRecord);


        NewRecordTitle = string.Empty;
        NewRecordContentObject.Text = string.Empty;  // Используйте Text вместо NewRecordContent
        NewRecordContentObject.ImageUrls = imageUrls.ToList();  // Конвертируйте список в массив
        SelectedImage = "";
        showErrorMessage = false;
        await Close();
    }

    public class JsonbListConverter : ValueConverter<List<string>, string>
    {
        public JsonbListConverter() : base(
            v => JsonConvert.SerializeObject(v),
            v => JsonConvert.DeserializeObject<List<string>>(v))
        { }
    }








}

