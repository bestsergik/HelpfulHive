@using HelpfulHive.Models;
@using HelpfulHive.ViewModels
@using Newtonsoft.Json;
@using HelpfulHive.Services
@using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.EntityFrameworkCore.ChangeTracking;
@inject RecordViewModel RecordVM
@inject ImageService ImageService
@inject IJSRuntime JSRuntime




@if (IsVisible)
{
    <div class="add-record-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="add-record-modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Новый шаблон</h5>
                    <button @onclick="Close" class="btn-close">
                    </button>
                </div>
                <div class="modal-body">   
                    <div class="floating-label floating-label-title">
                        <input @bind="NewRecordTitle" type="text" id="NewRecordTitle" class="floating-label-control" placeholder=" " />
                        <label for="NewRecordTitle">Название шаблона</label>

                    </div>

                    @if (string.IsNullOrEmpty(NewRecordTitle) && showErrorMessage)
                    {
                        <div class="text-danger">Введите название шаблона</div>
                    }

                    <div class="toolbar" style="white-space: nowrap;">
                        <button style="font-weight: bold;" @onclick="@(() => ExecuteCommand("bold"))">B</button>
                        <button style="font-style: italic;" @onclick="@(() => ExecuteCommand("italic"))">К</button>
                        <button style="text-decoration: underline;" @onclick="@(() => ExecuteCommand("underline"))">Ч</button>
                        <button @onclick="@(() => ChangeFontSize("increase"))">A+</button>
                        <button @onclick="@(() => ChangeFontSize("decrease"))">A-</button>
                        <button @onclick="@(() => ResetStyles())">По умолчанию</button>
                        <!-- Выбор шрифта -->
                        <select @onchange="@((ChangeEventArgs e) => ExecuteCommand("fontName", e.Value.ToString()))">
                            <option value="Arial">Arial</option>
                            <option value="Verdana">Verdana</option>
                            <option value="Times New Roman">Times New Roman</option>
                            <option value="Courier New">Courier New</option>
                            <option value="Georgia">Georgia</option>
                            <option value="Palatino">Palatino</option>
                            <option value="Garamond">Garamond</option>
                            <option value="Bookman">Bookman</option>
                            <option value="Comic Sans MS">Comic Sans MS</option>
                            <option value="Trebuchet MS">Trebuchet MS</option>
                            <option value="Arial Black">Arial Black</option>
                            <!-- Добавьте другие шрифты по желанию -->
                        </select>


                        <!-- Выбор цвета текста -->
                        <input type="color" @onchange="@((ChangeEventArgs e) => ExecuteCommand("foreColor", e.Value.ToString()))" />

                        <!-- Добавьте дополнительные кнопки и функции для других команд форматирования -->
                    </div>
                    <div class="floating-label floating-label-content">
                        <div id="content" contenteditable="true" @ref="editorRef" class="floating-label-control editable-content" placeholder=" " @onpaste="HandlePaste" @onpaste:preventDefault></div>
                        <label for="content">Текст шаблона</label>
                    </div>

                    @if (string.IsNullOrEmpty(NewRecordContentObject.Text) && showErrorMessage)
                    {
                        <div class="text-danger">Введите текст шаблона</div>
                    }
                    <div class="button-panel">
                        <button @onclick="@(() => InsertTextAtCursor("{NUMERIC}"))" class="btn btn-secondary"><span class="tooltip-text">6432123456789123 220023423454 </span>NUMERIC</button>
                        <button @onclick="@(() => InsertTextAtCursor("{SPECIFIC_VARCHAR}"))" class="btn btn-secondary"><span class="tooltip-text">'T-00-345353253-22' 'C-00-345353253-22' '5643668e-d08f-fe..'</span>SPECIFIC_VARCHAR</button>
                        <button @onclick="@(() => InsertTextAtCursor("{NUMERIC_VARCHAR}"))" class="btn btn-secondary"><span class="tooltip-text">'6432123456789123' '220023423454'</span>NUMERIC_VARCHAR</button>
                    </div>
                    <br>

                    <div class="button-dropdown-container">

                    @if (AvailableSubTabs == null)
                    {
                        <p>Загрузка вкладок...</p>
                    }
                    else if (!AvailableSubTabs.Any())
                    {
                        <p>Вкладки отсутствуют</p>
                    }
                    else
                    {
                            <div class="dropdown">
                                <div class="dropdown-select dropdown-select-default">
                                    <span>@(SelectedSubTabId != 0 ? AvailableSubTabs.FirstOrDefault(st => st.Id == SelectedSubTabId)?.Name : "Выберите вкладку")</span>
                                    <i class="fa fa-chevron-down"></i>
                                </div>
                                <div class="dropdown-list ">
                                    @foreach (var subTab in AvailableSubTabs.OrderBy(st => st.Name))
{
    <div class="dropdown-item" @onclick="() => SelectSubTab(subTab.Id)" data-value="@subTab.Id">@subTab.Name</div>
}
                                </div>
                            </div>
                    }

                        <button @onclick="ShowImageSelection" class="btn btn-primary-3">Выбрать картинку</button>

                    </div>

                    @if (SelectedSubTabId == 0 && showErrorMessage)
                    {
                        <div class="text-danger">Выберите вкладку</div>
                    }

                    <br>
                    <div class="button-container">
                        <button @onclick="Close" class="btn btn-primary-2">Отмена</button>
                        <button @onclick="AddRecord" class="btn btn-primary">Сохранить шаблон</button>
                    </div>

                </div>
            
            </div>
        </div>
    </div>
      
}

@if (IsLoading)
{
    <div class="loading-overlay">
        <div class="spinner"></div>
    </div>
}

<LoadingAnimation IsLoadingAnimation="@isLoadingAnimation"
                  ShowSuccessMessageAnimation="@showSuccessMessageAnimation"
                  ShowErrorMessageAnimation="@showErrorMessageAnimation" />

<ImageSelectionModal IsVisible="@isImageSelectionVisible"
                     IsVisibleChanged="OnImageModalVisibilityChanged"
                     OnImageSelected="HandleImageSelected" />


@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<RecordModel> OnRecordAdded { get; set; }
    [Parameter] public IEnumerable<TabItem> AvailableSubTabs { get; set; } = new List<TabItem>();
    [Parameter] public EventCallback OnCloseDialog { get; set; }
    [Parameter] public TabItem SelectedTab { get; set; }
    [Parameter]
    public bool IsLoading { get; set; }

    private Dictionary<string, List<string>> AvailableImagesByFolders { get; set; }
    private string SelectedFolder { get; set; }
    private string SelectedImage { get; set; } = "";
    private string NewRecordTitle { get; set; } = string.Empty;
    private string NewRecordContent { get; set; } = string.Empty;
    private int SelectedSubTabId { get; set; }
    private bool showErrorMessage = false;
    private RecordContent NewRecordContentObject { get; set; } = new RecordContent();

    private ElementReference editorRef;
    private bool isLoadingAnimation = false;
    private bool showSuccessMessageAnimation = false;
    private bool showErrorMessageAnimation = false;

    private void HandleImageSelected(string selectedImagePath)
    {
        SelectedImage = selectedImagePath; // Обновите переменную с выбранным путем изображения
                                           // Любая дополнительная логика
    }

    private bool isImageSelectionVisible = false;

    private void ShowImageSelection()
    {
        isImageSelectionVisible = true;
    }

    private void OnImageModalVisibilityChanged(bool isVisible)
    {
        isImageSelectionVisible = isVisible;
        StateHasChanged(); // Обновите состояние
    }

    private int fontSize = 3; // Начальный размер шрифта, предполагая, что это средний размер

    private async Task ChangeFontSize(string changeType)
    {
        if (changeType == "increase" && fontSize < 7) fontSize++;
        if (changeType == "decrease" && fontSize > 1) fontSize--;

        await ExecuteCommand("fontSize", fontSize.ToString());
    }

    private async Task ExecuteCommand(string command, string argument)
    {
        await JSRuntime.InvokeVoidAsync("executeCommand", editorRef, command, argument);
    }

    private async Task ExecuteCommand(string command)
    {
        await JSRuntime.InvokeVoidAsync("executeCommand", editorRef, command);
    }

    private async Task InsertTextAtCursor(string text)
    {
        // Создаем HTML со стилем для оранжевого текста
        var styledText = $"<b><span style='color: green;'>{text}</span></b>";

        // Вызываем JavaScript функцию для вставки HTML в текущую позицию курсора
        await JSRuntime.InvokeVoidAsync("insertHtmlAtCursor", editorRef, styledText);
    }

    private async Task HandlePaste(Microsoft.AspNetCore.Components.Web.ClipboardEventArgs e)
    {

        await JSRuntime.InvokeVoidAsync("insertImageFromClipboard", editorRef, e);
    }

    private async Task UpdateContentText()
    {
        var text = await JSRuntime.InvokeAsync<string>("getContentText", editorRef);
        NewRecordContentObject.Text = text;

    }

    private async Task ResetStyles()
    {
        await ExecuteCommand("removeFormat"); // Сброс всех стилей к стандартным значениям
        await ExecuteCommand("fontSize", "3"); // Установите стандартный размер шрифта
        await ExecuteCommand("foreColor", "black"); // Установите стандартный цвет текста (черный)
        await ExecuteCommand("fontName", "Arial"); // Установите стандартный шрифт

        await ExecuteCommand("bold"); // Убрать жирность
        await ExecuteCommand("italic"); // Убрать курсив
        await ExecuteCommand("underline"); // Убрать подчеркивание
    }

    protected override void OnInitialized()
    {
        AvailableImagesByFolders = ImageService.GetImagesByFolders();
        SelectedFolder = AvailableImagesByFolders.Keys.First();
    }

    private async Task Close()
    {
        IsVisible = false;  
        await IsVisibleChanged.InvokeAsync(false);
        await OnCloseDialog.InvokeAsync(); 
        await InvokeAsync(StateHasChanged);
    }

    private void SelectFolder(string folder)
    {
        SelectedFolder = folder;
    }

    private void SelectImage(string imageName)
    {
        SelectedImage = string.IsNullOrEmpty(imageName) ? "default_template.png" : imageName;
    }


    private void TriggerAnimation(string animationName)
    {
        // Логика для активации анимации
    }

    // Функция для проверки валидности Base64 строки
    public bool IsValidBase64String(string s)
    {
        s = s.Trim();
        try
        {
            // Попробуйте конвертировать строку в массив байтов
            var bytes = Convert.FromBase64String(s);
            return true;
        }
        catch (FormatException)
        {
            // Если возникла ошибка формата, значит строка не является валидной Base64 строкой
            return false;
        }
    }
    private void SelectSubTab(int subTabId)
    {
        SelectedSubTabId = subTabId;
        // Тут ваша логика после выбора вкладки, возможно обновление состояния компонента или вызов StateHasChanged если это необходимо.
    }

    private async Task AddRecord()
    {
        isLoadingAnimation = true;
        showSuccessMessageAnimation = false;
        showErrorMessageAnimation = false;
        try
        {
            await UpdateContentText();
            if (string.IsNullOrEmpty(NewRecordTitle) ||
                string.IsNullOrEmpty(NewRecordContentObject.Text) ||
                SelectedSubTabId == 0)
            {
                showErrorMessage = true;
                StateHasChanged();
                return;
            }

            var imagePath = "content_images";

            var contentText = NewRecordContentObject.Text;
            var base64ImagePattern = @"data:image\/[a-zA-Z]+;base64,([A-Za-z0-9+/=]+)";
            var matches = Regex.Matches(contentText, base64ImagePattern);
            var imageTasks = matches.Select(async match =>
         {
             var base64Image = match.Groups[1].Value;
             if (IsValidBase64String(base64Image))
             {
                 var imageUrl = await ImageService.SaveImageAsync(base64Image, imagePath);
                 contentText = contentText.Replace(match.Value, imageUrl);
                 return imageUrl;
             }
             return null;
         }).ToList();

            var imageUrls = (await Task.WhenAll(imageTasks)).Where(url => url != null).ToList();

            NewRecordContentObject.Text = contentText;
            NewRecordContentObject.ImageUrls = imageUrls.ToList();
            var newRecord = new RecordModel
                {
                    Title = NewRecordTitle,
                    Content = NewRecordContentObject,
                    SubTabId = SelectedSubTabId,
                    ImagePath = string.IsNullOrEmpty(SelectedImage) ? "default_template.png" : SelectedImage

                };

            await RecordVM.AddRecordAsync(newRecord, SelectedSubTabId);
            await OnRecordAdded.InvokeAsync(newRecord);


            NewRecordTitle = string.Empty;
            NewRecordContentObject.Text = string.Empty;  // Используйте Text вместо NewRecordContent
            NewRecordContentObject.ImageUrls = imageUrls.ToList();  // Конвертируйте список в массив
            SelectedImage = "";
            showErrorMessage = false;
          

            await Close();
            showSuccessMessageAnimation = true;
        }
        catch {
            showErrorMessageAnimation = true;
            }
        finally
        {
            isLoadingAnimation = false;
            await InvokeAsync(StateHasChanged); // Используйте InvokeAsync

        }
    }

    public class JsonbListConverter : ValueConverter<List<string>, string>
    {
        public JsonbListConverter() : base(
            v => JsonConvert.SerializeObject(v),
            v => JsonConvert.DeserializeObject<List<string>>(v))
        { }
    }
}

