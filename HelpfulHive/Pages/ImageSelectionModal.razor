@using HelpfulHive.Models;
@using HelpfulHive.Services
@inject ImageService ImageService

@if (IsVisible)
{
    <div class="add-record-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="add-record-modal-content">
                <div class="image-selection">
                    @if (AvailableImagesByFolders != null && AvailableImagesByFolders.Any())
                    {
                        <div class="tab-container">
                            @foreach (var folder in AvailableImagesByFolders.Keys)
                            {
                                <button class="tab" @onclick="() => SelectFolder(folder)">
                                    @folder
                                </button>
                            }
                        </div>

                        <div class="image-grid">
                            @if (AvailableImagesByFolders.ContainsKey(SelectedFolder))
                            {
                                @foreach (var image in AvailableImagesByFolders[SelectedFolder])
                                {
                                    <div @onclick="() => SelectImage(image)" class="image-container">
                                        <img src="@($"images/{SelectedFolder}/{image}")" alt="@image" class="image-thumbnail" />

                                    </div>
                                }
                            }
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(SelectedImage))
                    {
                        <div class="selected-image-container">
                            <h5>Текущая картинка:</h5>
                            <img src="@($"images/{SelectedFolder}/{SelectedImage}")" alt="Selected Image" class="selected-image" />
                        </div>
                    }
                    else
                    {
                        // Показать изображение по умолчанию
                        <div class="selected-image-container">
                            <h5>Текущая картинка:</h5>
                            <img src="@("images/1/default_template.png")" alt="Default Image" class="selected-image" />
                        </div>
                    }
                    <button @onclick="HideImageSelection" class="btn btn-primary">Сохранить</button>

                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public IEnumerable<TabItem> AvailableSubTabs { get; set; } = new List<TabItem>();


    [Parameter] public EventCallback<string> OnImageSelected { get; set; }




    private Dictionary<string, List<string>> AvailableImagesByFolders { get; set; }
    private string SelectedFolder { get; set; }
    private string SelectedImage { get; set; } = "";
    private bool isImageSelectionVisible = false;



   
    private void ShowImageSelection()
    {

        isImageSelectionVisible = true;
    }

    private void HideImageSelection()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(false); // Обновите видимость
    }


    protected override void OnInitialized()
    {
        AvailableImagesByFolders = ImageService.GetImagesByFolders();
        SelectedFolder = AvailableImagesByFolders.Keys.First();
    }

    private void SelectFolder(string folder)
    {
        SelectedFolder = folder;
    }

    private void SelectImage(string imageName)
    {
        SelectedImage = string.IsNullOrEmpty(imageName) ? "default_template.png" : imageName;
        OnImageSelected.InvokeAsync(SelectedImage); // Вызов события с выбранным путем изображения
    }

    private async Task Close()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
        StateHasChanged(); // Попробуйте добавить этот вызов
    }



}
