@page "/record-list/{SelectedSubTabId}"
@using HelpfulHive.Models
@using HelpfulHive.Services
@using HelpfulHive.ViewModels
@inject RecordService RecordSV
@inject TabViewModel TabVM
@inject RecordViewModel RecordVM
@inject ImageService imageSRV
@inject IJSRuntime JSRuntime
@inject UserPreferencesService upVM
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Text
@using System.Text.RegularExpressions;

<svg id="checkmark" xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 50 50" style="position: fixed; visibility: hidden;">
    <defs>
        <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:rgb(39,93,195);stop-opacity:1" />
            <stop offset="100%" style="stop-color:rgb(153,87,45);stop-opacity:1" />
        </linearGradient>
    </defs>
    <path d="M5 25L20 40L45 5" stroke="url(#grad1)" stroke-width="8" fill="none" stroke-linecap="round" />
</svg>


<div class="search-and-actions">
    <div class="search-area">
        <input type="text" @bind="searchQuery" @oninput="HandleInput" placeholder="Поиск шаблонов..." />
        <div class="checkbox-area">
            <input type="checkbox" @bind="isSearchAll" /> Все шаблоны
        </div>
    </div>

    <div class="actions-area">
        @if (PopularRecords != null && PopularRecords.Any())
        {
            <div class="popular-record-list">
                @foreach (var record in PopularRecords)
                {
                    <div class="popular-record-item" @onclick="() => HandleClick(record)">
                        <img src="@($"images/{FindFolderForImage(record.ImagePath)}/{record.ImagePath}")" alt="Record image" class="record-img" />
                    </div>
                }
            </div>
        }
        else
        {
       
        }
    </div>
</div>


@if (Records != null && Records.Any())
{
    <div class="record-list">
        @foreach (var record in Records)
        {
            <div class="record-item" @ondblclick="() => OnDoubleClick(record)" @onclick="@(e => OnSingleClick(e, record))">
                <img src="@($"images/{FindFolderForImage(record.ImagePath)}/{record.ImagePath}")" alt="Record image" class="record-img" />
                <div class="record-content">@record.Title</div>
                <span class="edit-icon" @onclick="() => EditRecord(record)">
                    <i class="oi oi-pencil"></i>
                </span>
            </div>
        }
    </div>
}
else
{
    <p><h5>Здесь пока пусто..</h5></p>
}

<EditRecordDialog IsVisible="@isEditDialogVisible"
                  RecordToEdit="@selectedRecord"
                  OnEditDialogClosed="@CloseEditDialog"
                  AvailableSubTabs="@GetAllSubTabs()"
                  OnRecordDeleted="OnRecordDeleted" />

<AddRecordDialog OnRecordAdded="HandleNewRecordAdded" AvailableSubTabs="@GetAllSubTabs()"  />

@code {
    [Parameter] public List<RecordModel> Records { get; set; }
    [Parameter] public string SelectedSubTabId { get; set; }
    [Parameter] public bool LoadFavorites { get; set; } = false;
    [Parameter]
    public EventCallback<RecordModel> OnRecordAddedFromNavMenu { get; set; }

    private List<RecordModel> PopularRecords { get; set; }
    private ScriptBuilder scriptBuilder;
    private RecordModel? selectedRecord;

    private bool isEditDialogVisible = false;
    private bool isSearchAll = false;
    private string searchQuery = string.Empty;
    private bool isDoubleClick;


    private async Task SearchRecords()
    {
        Records = await RecordVM.SearchRecordsAsync(searchQuery, isSearchAll, SelectedSubTabId);
        StateHasChanged();
    }

    private void CloseEditDialog()
    {
        isEditDialogVisible = false;
        StateHasChanged(); // Чтобы убедиться, что состояние компонента обновлено
    }

    private async Task OnRecordDeleted(RecordModel deletedRecord)
    {
        Records.Remove(deletedRecord);
        await ReloadRecords(); // Обновляем список записей
        StateHasChanged();
    }

    private string FindFolderForImage(string imageName)
    {

        var imagesByFolders = imageSRV.GetImagesByFolders();

        foreach (var folder in imagesByFolders)
        {
            var folderName = folder.Key;
            var imagesList = folder.Value;

            if (imagesList.Contains(imageName))
            {
                return folderName;
            }
        }
        return string.Empty;
    }


    protected override async Task OnInitializedAsync()
    {
        Records = new List<RecordModel>(); // Инициализация пустого списка

        await LoadPopularRecords();

        if (LoadFavorites)
        {
            await LoadFavoriteRecords();
        }
    }

    private async Task LoadFavoriteRecords()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (userId != null)
        {
            Records = await RecordSV.GetFavoriteRecordsByUserAsync(userId);
            StateHasChanged();
        }
    }

    private async Task LoadRecordsFromSubTab()
    {
        if (!string.IsNullOrWhiteSpace(SelectedSubTabId))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                Records = await RecordSV.GetRecordsBySubTabUriAsync(SelectedSubTabId, userId);
                StateHasChanged();
            }
        }
    }


    private async Task LoadPopularRecords()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (userId != null)
        {
            PopularRecords = await upVM.GetTopNClickedRecordsAsync(5, userId);
            StateHasChanged();
        }
    }

    private bool ContainsKeyWords(string text)
    {
        var keyWords = new List<string> { "{NUMERIC}", "select", "SELECT", "{NUMERIC_VARCHAR}", "{SPECIFIC_VARCHAR}", "comma" };
        return keyWords.Any(keyword => text.Contains(keyword));
    }


    protected override void OnInitialized()
    {
        scriptBuilder = new ScriptBuilder(JSRuntime);
    }

    private async Task HandleClick(RecordModel record)
    {
     
        if (record != null && record.Content != null && Records.Contains(record))
        {
            if (ContainsKeyWords(record.Content.Text ?? ""))
            {
                await scriptBuilder.BuildScriptAsync(record.Content.Text);
            }
            else
            {
                var htmlContent = ConvertRelativeUrlsToAbsolute(record.Content.Text);
                await JSRuntime.InvokeVoidAsync("copyHtmlToClipboard", htmlContent);
            }
        }
    }


    private string ConvertRelativeUrlsToAbsolute(string html)
    {
        var baseUrl = "https://supportools.ru/";
        // Регулярное выражение для поиска относительных URL
        var regex = new Regex("src=\"(.*?)\"");
        var matches = regex.Matches(html);

        foreach (Match match in matches)
        {
            var relativeUrl = match.Groups[1].Value;
            if (!relativeUrl.StartsWith("http"))
            {
                var absoluteUrl = baseUrl + relativeUrl.TrimStart('/');
                html = html.Replace(relativeUrl, absoluteUrl);
            }
        }

        return html;
    }

    private async Task OnSingleClick(MouseEventArgs e, RecordModel record)
    {
        isDoubleClick = false;
        await Task.Delay(190); // Задержка для проверки двойного клика
        if (!isDoubleClick)
        {
            HandleClick(record);
            await JSRuntime.InvokeVoidAsync("animateCheckmark", e.ClientX, e.ClientY);
        }
    }

    private void OnDoubleClick(RecordModel record)
    {
        isDoubleClick = true;
        EditRecord(record);
    }


    private void HandleInput(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        SearchRecords();
    }

    protected override async Task OnParametersSetAsync()
    {

        if (!LoadFavorites && !string.IsNullOrEmpty(SelectedSubTabId))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                Records = await RecordSV.GetRecordsBySubTabUriAsync(SelectedSubTabId, userId);
            }
        }
    }

    private async Task LoadRecords(string subTabUri, string userId)
    {
        Records = await RecordSV.GetRecordsBySubTabUriAsync(subTabUri, userId);
    }


    private void EditRecord(RecordModel record)
    {
        selectedRecord = record; // Set the record to be edited
        isEditDialogVisible = true; // Open the edit dialog
    }

    private IEnumerable<TabItem> GetAllSubTabs()
    {
        return TabVM.Tabs.SelectMany(tab => tab.SubTabs ?? new List<TabItem>());
    }

    private async Task HandleNewRecordAdded(RecordModel newRecord)
    {
        Records.Add(newRecord);
        StateHasChanged();
    }

    private async Task ReloadRecords()
    {
        if (LoadFavorites)
        {
            await LoadFavoriteRecords();
        }
        else if (!string.IsNullOrWhiteSpace(SelectedSubTabId))
        {
            await LoadRecordsFromSubTab();
        }
        StateHasChanged(); // Update the UI
    }
}

