@page "/record-list/{SelectedSubTabId}"
@using HelpfulHive.Models
@using HelpfulHive.Services
@using HelpfulHive.ViewModels
@inject RecordService RecordSV
@inject TabViewModel TabVM
@inject RecordViewModel RecordVM
@inject IJSRuntime JSRuntime

<div class="search-and-actions">
    <div class="search-area">
        <input type="text" @bind="searchQuery" @oninput="HandleInput" placeholder="Search records..." />
        <input type="checkbox" @bind="isSearchAll" /> Все записи
    </div>
    <div class="actions-area">
        <!-- Здесь можно добавить кнопки и другие элементы управления -->
    </div>
</div>

@if (Records != null && Records.Any())
{
    <div class="record-list">
        @foreach (var record in Records)
        {
            <div class="record-item" @ondblclick="() => EditRecord(record)" @onclick="() => HandleClick(record)">
                <img src="@($"images/{record.ImagePath}")" alt="Record image" class="record-img" />
                <div class="record-content">@record.Title</div>
                <span class="edit-icon" @onclick="() => EditRecord(record)">
                    <i class="oi oi-pencil"></i>
                </span>
            </div>
        }
    </div>
}
else
{
<p>No records available.</p>
}

<EditRecordDialog IsVisible="@isEditDialogVisible" RecordToEdit="@selectedRecord" OnEditDialogClosed="@ReloadRecords" AvailableSubTabs="@GetAllSubTabs()" />
<AddRecordDialog OnRecordAdded="HandleNewRecordAdded" AvailableSubTabs="@GetAllSubTabs()"  />

@code {
    [Parameter] public List<RecordModel> Records { get; set; }
    [Parameter] public string SelectedSubTabId { get; set; }
    [Parameter]
    public EventCallback<RecordModel> OnRecordAddedFromNavMenu { get; set; }

    private ScriptBuilder scriptBuilder;

    private bool isEditDialogVisible = false;
    private RecordModel? selectedRecord;
    private bool isSearchAll = false;

    private string searchQuery = string.Empty;

    private async Task SearchRecords()
    {
        Console.WriteLine($"Search query: {searchQuery}"); // Добавьте эту строку для отладки

        Records = await RecordVM.SearchRecordsAsync(searchQuery, isSearchAll);
        StateHasChanged();
    }


    protected override void OnInitialized()
    {
        scriptBuilder = new ScriptBuilder(JSRuntime);
    }

    private async Task HandleClick(RecordModel record)
    {
        await RecordVM.HandleClick(record);
        await scriptBuilder.BuildScriptAsync(record.Content);
    }

    private void HandleInput(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        StateHasChanged();
        SearchRecords();
    }


    protected override async Task OnParametersSetAsync()
    {
        await LoadRecords(SelectedSubTabId);
    }

    private async Task LoadRecords(string subTabUri)
    {
        Records = await RecordSV.GetRecordsBySubTabUriAsync(subTabUri);
    }

    private void EditRecord(RecordModel record)
    {
        selectedRecord = record; // Set the record to be edited
        isEditDialogVisible = true; // Open the edit dialog
    }

    private IEnumerable<TabItem> GetAllSubTabs()
    {
        return TabVM.Tabs.SelectMany(tab => tab.SubTabs ?? new List<TabItem>());
    }

    private async Task HandleNewRecordAdded(RecordModel newRecord)
    {
        Records.Add(newRecord);
        StateHasChanged();
    }

    private async Task ReloadRecords()
    {
        isEditDialogVisible = false; // Close the edit dialog
        await LoadRecords(SelectedSubTabId); // Wait for records to load
        StateHasChanged(); // Update the UI
    }
}

