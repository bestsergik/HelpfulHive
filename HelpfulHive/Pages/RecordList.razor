@page "/record-list/{SelectedSubTabId}"
@using HelpfulHive.Models
@using HelpfulHive.Services
@using HelpfulHive.ViewModels
@inject RecordService RecordSV
@inject TabViewModel TabVM
@inject RecordViewModel RecordVM
@inject ImageService imageSRV
@inject IJSRuntime JSRuntime
@inject UserPreferencesService upVM
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="search-and-actions">
    <div class="search-area">
        <input type="text" @bind="searchQuery" @oninput="HandleInput" placeholder="Поиск шаблонов..." />
        <div class="checkbox-area">
            <input type="checkbox" @bind="isSearchAll" /> Все шаблоны
        </div>
    </div>

    <div class="actions-area">
        @if (PopularRecords != null && PopularRecords.Any())
        {
            <div class="popular-record-list">
                @foreach (var record in PopularRecords)
                {
                    <div class="popular-record-item" @onclick="() => HandleClick(record)">
                        <img src="@($"images/{FindFolderForImage(record.ImagePath)}/{record.ImagePath}")" alt="Record image" class="record-img" />
                    </div>
                }
            </div>
        }
        else
        {
       
        }
    </div>
</div>


@if (Records != null && Records.Any())
{
    <div class="record-list">
        @foreach (var record in Records)
        {
            <div class="record-item" @ondblclick="() => OnDoubleClick(record)" @onclick="() => OnSingleClick(record)">
                <img src="@($"images/{FindFolderForImage(record.ImagePath)}/{record.ImagePath}")" alt="Record image" class="record-img" />
                <div class="record-content">@record.Title</div>
                <span class="edit-icon" @onclick="() => EditRecord(record)">
                    <i class="oi oi-pencil"></i>
                </span>
            </div>
        }
    </div>
}
else
{
    <p><h5>Здесь пока пусто..</h5></p>
}

<EditRecordDialog IsVisible="@isEditDialogVisible" RecordToEdit="@selectedRecord" OnEditDialogClosed="@ReloadRecords" AvailableSubTabs="@GetAllSubTabs()" />
<AddRecordDialog OnRecordAdded="HandleNewRecordAdded" AvailableSubTabs="@GetAllSubTabs()"  />

@code {
    [Parameter] public List<RecordModel> Records { get; set; }
    [Parameter] public string SelectedSubTabId { get; set; }
    [Parameter]
    public EventCallback<RecordModel> OnRecordAddedFromNavMenu { get; set; }

    private ScriptBuilder scriptBuilder;

    private bool isEditDialogVisible = false;
    private RecordModel? selectedRecord;
    private bool isSearchAll = false;

    private string searchQuery = string.Empty;

    private List<RecordModel> PopularRecords { get; set; }


    private async Task SearchRecords()
    {

        Records = await RecordVM.SearchRecordsAsync(searchQuery, isSearchAll);
        StateHasChanged();
    }

    private string FindFolderForImage(string imageName)
    {

        var imagesByFolders = imageSRV.GetImagesByFolders();

        foreach (var folder in imagesByFolders)
        {
            var folderName = folder.Key;
            var imagesList = folder.Value;

            if (imagesList.Contains(imageName))
            {
                return folderName;
            }
        }

        // Если изображение не найдено во всех папках, можно вернуть значение по умолчанию, например, пустую строку
        // или выбросить исключение, в зависимости от того, что лучше подходит для вашего проекта.
        return string.Empty;
    }



    protected override async Task OnInitializedAsync()
    {
        await LoadPopularRecords();
    }


    private async Task LoadPopularRecords()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (userId != null)
        {
            PopularRecords = await upVM.GetTopNClickedRecordsAsync(5, userId);
            StateHasChanged();
        }
    }


    protected override void OnInitialized()
    {
        scriptBuilder = new ScriptBuilder(JSRuntime);
    }

    private async Task HandleClick(RecordModel record)
    {
        if (record != null && Records.Contains(record))
        {
            await RecordVM.HandleClick(record);
            string recordText = record.Content.Text;  // Доступ к тексту
            await scriptBuilder.BuildScriptAsync(recordText);  // Используйте текст для построения скрипта
        }
    }

    private bool isDoubleClick = false;
    private const int ClickDelay = 300; // Задержка в миллисекундах

    private async Task OnSingleClick(RecordModel record)
    {
        await Task.Delay(ClickDelay);
        if (!isDoubleClick && record != null && Records.Contains(record))
        {
            // Обработка одинарного клика
            await HandleSingleClick(record);
        }
        isDoubleClick = false;
    }

    private void OnDoubleClick(RecordModel record)
    {
        isDoubleClick = true;
        // Обработка двойного клика
        EditRecord(record);
    }

    private async Task HandleSingleClick(RecordModel record)
    {
        if (record != null && Records.Contains(record))
        {
        Console.WriteLine("203980384701934780192745-1293875-128375-1280375-128375-2018735-128375");
        await RecordVM.HandleClick(record);
        string recordText = record.Content.Text;
        await scriptBuilder.BuildScriptAsync(recordText);
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        StateHasChanged();
        SearchRecords();
    }


    protected override async Task OnParametersSetAsync()
    {
        await LoadRecords(SelectedSubTabId);
    }

    private async Task LoadRecords(string subTabUri)
    {
        Records = await RecordSV.GetRecordsBySubTabUriAsync(subTabUri);
    }

    private void EditRecord(RecordModel record)
    {
        selectedRecord = record; // Set the record to be edited
        isEditDialogVisible = true; // Open the edit dialog
    }

    private IEnumerable<TabItem> GetAllSubTabs()
    {
        return TabVM.Tabs.SelectMany(tab => tab.SubTabs ?? new List<TabItem>());
    }

    private async Task HandleNewRecordAdded(RecordModel newRecord)
    {
        Records.Add(newRecord);
        StateHasChanged();
    }

    private async Task ReloadRecords()
    {
        isEditDialogVisible = false; // Close the edit dialog
        await LoadRecords(SelectedSubTabId); // Wait for records to load
        StateHasChanged(); // Update the UI
    }
}

