@page "/record-list/{SelectedSubTabId}"
@using HelpfulHive.Models
@using HelpfulHive.Services
@using HelpfulHive.ViewModels
@inject RecordService RecordSV
@inject TabViewModel TabVM
@inject RecordViewModel RecordVM
@attribute [Authorize]
@inject ImageService imageSRV
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject UserPreferencesService upVM
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Text
@using System.Text.RegularExpressions;
@inject RecordUpdateService recordUpdateService
@inject LuceneSearchService lcSRV




@*<div class="search-and-actions">
    <div class="search-area">
        <input type="text" @bind="searchQuery" @oninput="HandleInput" placeholder="Поиск шаблонов..." />
    </div>

   <div class="actions-area">
        @if (PopularRecords != null && PopularRecords.Any())
        {
            <div class="popular-record-list">
                @foreach (var record in PopularRecords)
                {
                    <div class="popular-record-item" @onclick="() => HandleClick(record)">
                        <img src="@($"images/{FindFolderForImage(record.ImagePath)}/{record.ImagePath}")" alt="Record image" class="record-img" />
                    </div>
                }
            </div>
        }
        else
        {
       
        }
    </div>
</div>*@



<div class="search-and-actions">
    <div class="search-area">
        <input type="text" @bind="searchQuery" @oninput="HandleInput" placeholder="Поиск шаблонов..." />
    </div>
</div>

@if (isSearchPerformed)
{
    <div class="split-view">
        <div class="left-pane">
            @if (ShowGroupedSearchResults && GroupedRecords != null)
            {
                <div class="record-list">
                    @foreach (var topLevelGroup in GroupedRecords.GroupBy(g => g.Key.Split('/')[0]))
                    {
                        <div class="tab-group">
                            @{
                                var tabType = topLevelGroup.Key == "Personal" ? "Личные" : "Общие";
                            }
                            <div class="center-container">
                                <h4 class="tab-title">@tabType</h4>
                            </div>
                            <div class="group-divider"></div>
                            @foreach (var subTabGroup in topLevelGroup.GroupBy(g => g.Key.Split('/')[1]))
                            {
                                <div class="subtab-group">
                                    <h5 class="subtab-title">@subTabGroup.Key</h5>
                                    <div class="group-divider"></div>
                                    @foreach (var recordGroup in subTabGroup)
                                    {
                                        <div class="record-group">
                                            <h6 class="group-title">@FormatGroupTitle(recordGroup.Key)</h6>
                                            <div class="group-divider"></div>
                                            @foreach (var record in recordGroup)
                                            {
                                                <div class="record-item" @ondblclick="() => OnDoubleClick(record)" @onclick="@(e => OnSingleClick(e, record))">
                                                    <div class="record-item-content">
                                                        <img src="@($"images/{FindFolderForImage(record.ImagePath)}/{record.ImagePath}")" alt="Record image" class="record-img" />
                                                        <div class="record-content">@record.Title</div>
                                                    </div>
                                                    <span class="edit-icon" @onclick="() => EditRecord(record)">
                                                        <i class="fas fa-pencil-alt"><span class="tooltip-text">Редактировать запись</span></i> <!-- Иконка карандаша от Font Awesome -->
                                                 
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
        <div class="right-pane">
            @if (luceneSearchResults != null)
            {
                <div class="record-list">
                    @foreach (var result in luceneSearchResults)
                    {
                        <div class="record-item">
                            <div class="record-content">@result.RequestNumber</div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="full-width-pane">
        @if (Records != null && Records.Any())
        {
            <div class="record-list">
                <div class="record-group">
                    <h4>@(GetActiveSubTabName())</h4>
                    @foreach (var record in Records)
                    {
                        <div class="record-item @(newRecordIndicators.ContainsKey(record.Id) && !newRecordIndicators[record.Id] ? "" : "new-record-indicator")" @ondblclick="() => OnDoubleClick(record)" @onclick="@(e => OnSingleClick(e, record))">
                            <div class="new-record-indicator-img"></div>
                            <div class="record-item-content">
                                <img src="@($"images/{FindFolderForImage(record.ImagePath)}/{record.ImagePath}")" alt="Record image" class="record-img" />
                                <div class="record-content">@record.Title</div>
                            </div>
                            <span class="edit-icon" @onclick="() => EditRecord(record)">
                                <i class="fas fa-pencil-alt">       <span class="tooltip-text">Редактировать запись</span></i> <!-- Иконка карандаша от Font Awesome -->
                            </span>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <p><h5>Здесь пока пусто..</h5></p>
        }
    </div>
}




<LoadingAnimation IsLoadingAnimation="@isLoadingAnimation" />


<EditRecordDialog IsVisible="@isEditDialogVisible"
                  RecordToEdit="@selectedRecord"
                  OnEditDialogClosed="@CloseEditDialog"
                  AvailableSubTabs="@GetAllSubTabs()"
                  OnRecordDeleted="OnRecordDeleted" />

<AddRecordDialog OnRecordAdded="HandleNewRecordAdded" AvailableSubTabs="@GetAllSubTabs()"  />

@code {


    private bool isSearchPerformed = false;


    private async Task SearchLuceneRecords()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            var requestNumbers = lcSRV.Search(searchQuery);
            luceneSearchResults = await lcSRV.GetRecordsByRequestNumbers(requestNumbers);
        }
        else
        {
            luceneSearchResults = new List<RawData>();
        }
    }


    private List<RawData> luceneSearchResults;



    [Parameter] public List<RecordModel> Records { get; set; }
    [Parameter] public string SelectedSubTabId { get; set; }
    [Parameter] public bool LoadFavorites { get; set; } = false;
    [Parameter]
    public EventCallback<RecordModel> OnRecordAddedFromNavMenu { get; set; }

    private List<RecordModel> PopularRecords { get; set; }
    private ScriptBuilder scriptBuilder;
    private RecordModel? selectedRecord;

    private bool isEditDialogVisible = false;
    private bool isSearchAll = false;
    private string searchQuery = string.Empty;
    private bool isDoubleClick;
    private List<IGrouping<string, RecordModel>> GroupedRecords { get; set; }
    private bool ShowGroupedRecords => !string.IsNullOrEmpty(searchQuery);
    private List<RecordModel> AllRecords { get; set; }
    private bool ShowGroupedSearchResults => !string.IsNullOrEmpty(searchQuery) && Records != null && Records.Any();
    private bool isSingleClick = false;
    private bool isLoadingAnimation = false;

    private Dictionary<int, bool> newRecordIndicators = new Dictionary<int, bool>();


    private async Task<Dictionary<int, bool>> GetUserNewRecordIndicators(string userId)
    {
        var userPreferences = await upVM.GetUserPreferences(userId);
        var newRecordIndicators = userPreferences.ToDictionary(
            up => up.RecordId,
            up => !up.HasViewedNewCommonRecord);

        return newRecordIndicators;
    }


    private string FormatGroupTitle(string groupKey)
    {
        var parts = groupKey.Split('/');

        // Возвращаем только последнюю часть ключа (подвкладку)
        return parts.LastOrDefault()?.Trim() ?? "N/A";
    }


    private async Task SearchRecords()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(searchQuery))
            {
                Records = await RecordVM.GetRecordsBySubTabUriAsync(SelectedSubTabId);
            }
            else
            {
                Records = await RecordVM.SearchRecordsAsync(searchQuery, isSearchAll, SelectedSubTabId);
            }

            // Группируем записи по вкладкам и подвкладкам
            GroupedRecords = Records.GroupBy(r => $"{r.SubTab.TabType}/{r.SubTab.ParentTab?.Name}/{r.SubTab.Name}")
                                    .OrderBy(g => g.Key)
                                    .ToList();

            StateHasChanged();
        }
        catch
        {

        }
    }

    private string GetActiveSubTabName()
    {
        if (!string.IsNullOrEmpty(SelectedSubTabId))
        {
            var activeSubTab = GetSubTabById(SelectedSubTabId);
            if (activeSubTab != null)
            {


                return activeSubTab.Name ?? "Все записи";
            }
        }

        return "Все записи";
    }

    private TabItem GetSubTabById(string subTabId)
    {

        // Ваш код для поиска подвкладки по идентификатору
        var subTab = GetAllSubTabs().FirstOrDefault(tab => tab.Uri.Equals(subTabId, StringComparison.OrdinalIgnoreCase));

  

        return subTab;
    }


    private void HandleInput(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        isSearchPerformed = !string.IsNullOrWhiteSpace(searchQuery);
        SearchRecords();
        SearchLuceneRecords();
    }

    private void CloseEditDialog()
    {
        isEditDialogVisible = false;
        StateHasChanged(); // Чтобы убедиться, что состояние компонента обновлено
    }



    private async Task OnRecordDeleted(RecordModel deletedRecord)
    {
        Records.Remove(deletedRecord);
        await ReloadRecords(); // Обновляем список записей
        StateHasChanged();
    }

    private string FindFolderForImage(string imageName)
    {

        var imagesByFolders = imageSRV.GetImagesByFolders();

        foreach (var folder in imagesByFolders)
        {
            var folderName = folder.Key;
            var imagesList = folder.Value;

            if (imagesList.Contains(imageName))
            {
                return folderName;
            }
        }
        return string.Empty;
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/Identity/Account/Login", forceLoad: true);
            return; // Выход из метода, если пользователь не аутентифицирован
        }

        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (userId == null)
        {
            throw new InvalidOperationException("User ID is not found.");
        }

        Records = new List<RecordModel>(); // Инициализация пустого списка
        await LoadPopularRecords();

        if (LoadFavorites)
        {
            await LoadFavoriteRecords();
        }

        // Загружаем предпочтения пользователя
        var userPreferences = await upVM.GetUserPreferences(userId);

        newRecordIndicators = userPreferences.ToDictionary(
            up => up.RecordId,
            up => !up.HasViewedNewCommonRecord);
 
    }


    private async Task LoadFavoriteRecords()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (userId != null)
        {
            Records = await RecordSV.GetFavoriteRecordsByUserAsync(userId);
            StateHasChanged();
        }
    }

    private async Task LoadRecordsFromSubTab()
    {
        if (!string.IsNullOrWhiteSpace(SelectedSubTabId))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                Records = await RecordSV.GetRecordsBySubTabUriAsync(SelectedSubTabId, userId);
                StateHasChanged();
            }
        }
    }


    private async Task LoadPopularRecords()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (userId != null)
        {
            PopularRecords = await upVM.GetTopNClickedRecordsAsync(5, userId);
            StateHasChanged();
        }
    }

    private bool ContainsKeyWords(string text)
    {
        var keyWords = new List<string> { "{NUMERIC}", "select", "SELECT", "{NUMERIC_VARCHAR}", "{SPECIFIC_VARCHAR}", "comma" };
        return keyWords.Any(keyword => text.Contains(keyword));
    }


    protected override void OnInitialized()
    {
        scriptBuilder = new ScriptBuilder(JSRuntime);
        recordUpdateService.RecordsUpdated += ReloadRecords;

    }

    private async Task HandleClick(RecordModel record)
    {
        //   isLoadingAnimation = true; // Активация индикатора загрузки

        try
        {
            if (record != null && record.Content != null && Records.Contains(record))
            {
                if (ContainsKeyWords(record.Content.Text ?? ""))
                {

                    await scriptBuilder.BuildScriptAsync(record.Content.Text);
                }
                else
                {
                    var htmlContent = ConvertRelativeUrlsToAbsolute(record.Content.Text);
                    await JSRuntime.InvokeVoidAsync("copyHtmlToClipboard", htmlContent);
                }
            }
        }
        catch
        {

        }
        finally
        {
            //isLoadingAnimation = false; // Деактивация индикатора загрузки
            // await InvokeAsync(StateHasChanged); // Используйте InvokeAsync
        }
    }


    private string ConvertRelativeUrlsToAbsolute(string html)
    {
        // var baseUrl = "https://localhost:7058/";
        var baseUrl = "https://supportools.ru/";
        // Регулярное выражение для поиска относительных URL
        var regex = new Regex("src=\"(.*?)\"");
        var matches = regex.Matches(html);

        foreach (Match match in matches)
        {
            var relativeUrl = match.Groups[1].Value;
            if (!relativeUrl.StartsWith("http"))
            {
                var absoluteUrl = baseUrl + relativeUrl.TrimStart('/');
                html = html.Replace(relativeUrl, absoluteUrl);
            }
        }

        return html;
    }

    private async Task OnSingleClick(MouseEventArgs e, RecordModel record)
    {
        if (!isSingleClick)
        {
            isSingleClick = true;
            await Task.Delay(190); // Задержка для проверки двойного клика
            if (isSingleClick)
            {
                HandleClick(record);
                await JSRuntime.InvokeVoidAsync("animateCheckmark", e.ClientX, e.ClientY);
            }
            isSingleClick = false; // Сброс флага после обработки
        }
    }


    private async Task OnDoubleClick(RecordModel record)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (userId != null)
        {
            await upVM.MarkAsViewed(userId, record.Id);
            // Обновление newRecordIndicators для данной записи
            newRecordIndicators[record.Id] = false;
        }
        isSingleClick = false;
        EditRecord(record);

        StateHasChanged(); // Обновите состояние компонента для отображения изменений
    }

    

    protected override async Task OnParametersSetAsync()
    {

        if (!LoadFavorites && !string.IsNullOrEmpty(SelectedSubTabId))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                Records = await RecordSV.GetRecordsBySubTabUriAsync(SelectedSubTabId, userId);
            }
        }
    }

    private async Task LoadRecords(string subTabUri, string userId)
    {
        Records = await RecordSV.GetRecordsBySubTabUriAsync(subTabUri, userId);
    }


    private void EditRecord(RecordModel record)
    {
        selectedRecord = record; // Set the record to be edited
        isEditDialogVisible = true; // Open the edit dialog
    }

    private IEnumerable<TabItem> GetAllSubTabs()
    {
        return TabVM.Tabs.SelectMany(tab => tab.SubTabs ?? new List<TabItem>());
    }

    private async Task HandleNewRecordAdded(RecordModel newRecord)
    {
        Records.Add(newRecord);
        StateHasChanged();
    }

    private async Task ReloadRecords()
    {
        if (LoadFavorites)
        {
            await LoadFavoriteRecords();
        }
        else if (!string.IsNullOrWhiteSpace(SelectedSubTabId))
        {
            await LoadRecordsFromSubTab();
        }
        StateHasChanged(); // Update the UI
    }

    public void Dispose()
    {
        recordUpdateService.RecordsUpdated -= ReloadRecords;
    }
}

